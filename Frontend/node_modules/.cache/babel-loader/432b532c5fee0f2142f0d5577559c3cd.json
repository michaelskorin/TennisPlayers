{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer, useCallback } from 'react';\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case 'INPUT_CHANGE':\n      let formIsValid = true;\n\n      for (const inputId in state.inputs) {\n        if (!state.inputs[inputId]) {\n          continue;\n        }\n\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n\n      return { ...state,\n        inputs: { ...state.inputs,\n          [action.inputId]: {\n            value: action.value,\n            isValid: action.isValid\n          }\n        },\n        isValid: formIsValid\n      };\n\n    case 'SET_DATA':\n      return {\n        inputs: action.inputs,\n        isValid: action.formIsValid\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n  _s();\n\n  debugger;\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialFormValidity\n  });\n  const inputHandler = useCallback((id, value, isValid) => {\n    debugger;\n    dispatch({\n      type: 'INPUT_CHANGE',\n      inputId: id,\n      value: value,\n      isValid: isValid\n    });\n  }, []);\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: 'SET_DATA',\n      inputs: inputData,\n      formIsValid: formValidity\n    });\n  }, []);\n  return [formState, inputHandler, setFormData];\n};\n\n_s(useForm, \"epC4CuF7prGsftiivJhSx6iGADk=\");","map":{"version":3,"sources":["/Users/michaelskorin/Desktop/Web Development/TennisPlayers/tennis-players/Frontend/src/shared/hooks/form-hook.js"],"names":["useReducer","useCallback","formReducer","state","action","type","formIsValid","inputId","inputs","isValid","value","useForm","initialInputs","initialFormValidity","formState","dispatch","inputHandler","id","setFormData","inputData","formValidity"],"mappings":";;AAAA,SAASA,UAAT,EAAqBC,WAArB,QAAwC,OAAxC;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,cAAL;AACE,UAAIC,WAAW,GAAG,IAAlB;;AACA,WAAK,MAAMC,OAAX,IAAsBJ,KAAK,CAACK,MAA5B,EAAoC;AAClC,YAAI,CAACL,KAAK,CAACK,MAAN,CAAaD,OAAb,CAAL,EAA4B;AAC1B;AACD;;AACD,YAAIA,OAAO,KAAKH,MAAM,CAACG,OAAvB,EAAgC;AAC9BD,UAAAA,WAAW,GAAGA,WAAW,IAAIF,MAAM,CAACK,OAApC;AACD,SAFD,MAEO;AACLH,UAAAA,WAAW,GAAGA,WAAW,IAAIH,KAAK,CAACK,MAAN,CAAaD,OAAb,EAAsBE,OAAnD;AACD;AACF;;AAED,aAAO,EACL,GAAGN,KADE;AAELK,QAAAA,MAAM,EAAE,EACN,GAAGL,KAAK,CAACK,MADH;AAEN,WAACJ,MAAM,CAACG,OAAR,GAAkB;AAAEG,YAAAA,KAAK,EAAEN,MAAM,CAACM,KAAhB;AAAuBD,YAAAA,OAAO,EAAEL,MAAM,CAACK;AAAvC;AAFZ,SAFH;AAMLA,QAAAA,OAAO,EAAEH;AANJ,OAAP;;AAQF,SAAK,UAAL;AACE,aAAO;AACLE,QAAAA,MAAM,EAAEJ,MAAM,CAACI,MADV;AAELC,QAAAA,OAAO,EAAEL,MAAM,CAACE;AAFX,OAAP;;AAIF;AACE,aAAOH,KAAP;AA5BJ;AA8BD,CA/BD;;AAiCA,OAAO,MAAMQ,OAAO,GAAG,CAACC,aAAD,EAAgBC,mBAAhB,KAAwC;AAAA;;AAC7D;AACA,QAAM,CAACC,SAAD,EAAYC,QAAZ,IAAwBf,UAAU,CAACE,WAAD,EAAc;AACpDM,IAAAA,MAAM,EAAEI,aAD4C;AAEpDH,IAAAA,OAAO,EAAEI;AAF2C,GAAd,CAAxC;AAKA,QAAMG,YAAY,GAAGf,WAAW,CAAC,CAACgB,EAAD,EAAKP,KAAL,EAAYD,OAAZ,KAAwB;AACvD;AACAM,IAAAA,QAAQ,CAAC;AACPV,MAAAA,IAAI,EAAE,cADC;AAEPE,MAAAA,OAAO,EAAEU,EAFF;AAGPP,MAAAA,KAAK,EAAEA,KAHA;AAIPD,MAAAA,OAAO,EAAEA;AAJF,KAAD,CAAR;AAMD,GAR+B,EAQ7B,EAR6B,CAAhC;AAUA,QAAMS,WAAW,GAAGjB,WAAW,CAAC,CAACkB,SAAD,EAAYC,YAAZ,KAA6B;AAC3DL,IAAAA,QAAQ,CAAC;AACPV,MAAAA,IAAI,EAAE,UADC;AAEPG,MAAAA,MAAM,EAAEW,SAFD;AAGPb,MAAAA,WAAW,EAAEc;AAHN,KAAD,CAAR;AAKD,GAN8B,EAM5B,EAN4B,CAA/B;AAQA,SAAO,CAACN,SAAD,EAAYE,YAAZ,EAA0BE,WAA1B,CAAP;AACD,CA1BM;;GAAMP,O","sourcesContent":["import { useReducer, useCallback } from 'react';\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case 'INPUT_CHANGE':\n      let formIsValid = true;\n      for (const inputId in state.inputs) {\n        if (!state.inputs[inputId]) {\n          continue;\n        }\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n\n      return {\n        ...state,\n        inputs: {\n          ...state.inputs,\n          [action.inputId]: { value: action.value, isValid: action.isValid },\n        },\n        isValid: formIsValid,\n      };\n    case 'SET_DATA':\n      return {\n        inputs: action.inputs,\n        isValid: action.formIsValid,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n  debugger;\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialFormValidity,\n  });\n\n  const inputHandler = useCallback((id, value, isValid) => {\n    debugger;\n    dispatch({\n      type: 'INPUT_CHANGE',\n      inputId: id,\n      value: value,\n      isValid: isValid,\n    });\n  }, []);\n\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: 'SET_DATA',\n      inputs: inputData,\n      formIsValid: formValidity,\n    });\n  }, []);\n\n  return [formState, inputHandler, setFormData];\n};\n"]},"metadata":{},"sourceType":"module"}