{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/michaelskorin/Desktop/Web Development/TennisPlayers/tennis-players/Frontend/src/players/pages/Players.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from 'react';\nimport PlayersList from '../components/PlayersList';\nimport './Players.css';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\n\nconst Players = () => {\n  _s();\n\n  const [loadedPlayers, setLoadedPlayers] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const auth = useContext(AuthContext);\n\n  const clearError = () => {\n    setError(null);\n  };\n\n  useEffect(() => {\n    const fetchPlayers = async () => {\n      setIsLoading(true);\n\n      try {\n        const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/players`);\n        const responseData = await response.json();\n\n        if (!response.ok) {\n          throw new Error(responseData.message);\n        }\n\n        setLoadedPlayers(responseData.players);\n        setIsLoading(false); //setLoadedPlayers(responseData.players);\n      } catch (err) {\n        setIsLoading(false);\n        setError(err.message);\n        throw err;\n      }\n    };\n  }, []);\n\n  if (loadedPlayers) {}\n\n  return /*#__PURE__*/_jsxDEV(PlayersList, {\n    items: loadedPlayers\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Players, \"hlNT/VDuyfAoZwD4doTlYtQbPZ0=\");\n\n_c = Players;\nexport default Players;\n\nvar _c;\n\n$RefreshReg$(_c, \"Players\");","map":{"version":3,"sources":["/Users/michaelskorin/Desktop/Web Development/TennisPlayers/tennis-players/Frontend/src/players/pages/Players.js"],"names":["React","useContext","useState","useEffect","PlayersList","AuthContext","LoadingSpinner","ErrorModal","Players","loadedPlayers","setLoadedPlayers","error","setError","isLoading","setIsLoading","auth","clearError","fetchPlayers","response","fetch","process","env","REACT_APP_BACKEND_URL","responseData","json","ok","Error","message","players","err"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,QAAuD,OAAvD;AAEA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAO,eAAP;AACA,SAASC,WAAT,QAA4B,mCAA5B;AACA,OAAOC,cAAP,MAA2B,mDAA3B;AACA,OAAOC,UAAP,MAAuB,+CAAvB;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAMa,IAAI,GAAGd,UAAU,CAACI,WAAD,CAAvB;;AAEA,QAAMW,UAAU,GAAG,MAAM;AACvBJ,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,GAFD;;AAIAT,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMc,YAAY,GAAG,YAAY;AAC/BH,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,UAAI;AACF,cAAMI,QAAQ,GAAG,MAAMC,KAAK,CACzB,GAAEC,OAAO,CAACC,GAAR,CAAYC,qBAAsB,UADX,CAA5B;AAIA,cAAMC,YAAY,GAAG,MAAML,QAAQ,CAACM,IAAT,EAA3B;;AAEA,YAAI,CAACN,QAAQ,CAACO,EAAd,EAAkB;AAChB,gBAAM,IAAIC,KAAJ,CAAUH,YAAY,CAACI,OAAvB,CAAN;AACD;;AAEDjB,QAAAA,gBAAgB,CAACa,YAAY,CAACK,OAAd,CAAhB;AAEAd,QAAAA,YAAY,CAAC,KAAD,CAAZ,CAbE,CAeF;AACD,OAhBD,CAgBE,OAAOe,GAAP,EAAY;AACZf,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,QAAAA,QAAQ,CAACiB,GAAG,CAACF,OAAL,CAAR;AACA,cAAME,GAAN;AACD;AACF,KAvBD;AAwBD,GAzBQ,EAyBN,EAzBM,CAAT;;AA2BA,MAAIpB,aAAJ,EAAmB,CAClB;;AAED,sBAAO,QAAC,WAAD;AAAa,IAAA,KAAK,EAAEA;AAApB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAzCD;;GAAMD,O;;KAAAA,O;AA2CN,eAAeA,OAAf","sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\n\nimport PlayersList from '../components/PlayersList';\nimport './Players.css';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\n\nconst Players = () => {\n  const [loadedPlayers, setLoadedPlayers] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const auth = useContext(AuthContext);\n\n  const clearError = () => {\n    setError(null);\n  };\n\n  useEffect(() => {\n    const fetchPlayers = async () => {\n      setIsLoading(true);\n      try {\n        const response = await fetch(\n          `${process.env.REACT_APP_BACKEND_URL}/players`\n        );\n\n        const responseData = await response.json();\n\n        if (!response.ok) {\n          throw new Error(responseData.message);\n        }\n\n        setLoadedPlayers(responseData.players);\n\n        setIsLoading(false);\n\n        //setLoadedPlayers(responseData.players);\n      } catch (err) {\n        setIsLoading(false);\n        setError(err.message);\n        throw err;\n      }\n    };\n  }, []);\n\n  if (loadedPlayers) {\n  }\n\n  return <PlayersList items={loadedPlayers} />;\n};\n\nexport default Players;\n"]},"metadata":{},"sourceType":"module"}