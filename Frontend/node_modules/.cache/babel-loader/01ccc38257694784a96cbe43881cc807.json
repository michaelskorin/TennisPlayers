{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/michaelskorin/Desktop/Web Development/TennisPlayers/tennis-players/Frontend/src/players/pages/UpdatePlayer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport './NewPlayer.css';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport Card from '../../shared/components/UIElements/Card';\nimport { VALIDATOR_REQUIRE } from '../../util/validators';\nimport { MOCK_PLAYERS } from '../../util/MockPlayers';\n\nconst UpdatePlayer = props => {\n  _s();\n\n  const [loadedPlayer, setLoadedPlayer] = useState(null);\n  const playerId = useParams().pid;\n  const history = useHistory();\n  console.log(props.test);\n  const [formState, inputHandler, setFormData] = useForm({\n    age: {\n      value: null,\n      isValid: false\n    },\n    points: {\n      value: null,\n      isValid: false\n    },\n    weight: {\n      value: null,\n      isValid: false\n    },\n    height: {\n      value: null,\n      isValid: false\n    },\n    grand_slams: {\n      value: null,\n      isValid: true\n    }\n  }, false);\n  useEffect(() => {\n    const getPlayer = () => {\n      const foundPlayer = MOCK_PLAYERS.find(player => player.id === playerId);\n\n      if (foundPlayer) {\n        setLoadedPlayer(foundPlayer);\n        setFormData({\n          age: {\n            value: foundPlayer.age,\n            isValid: true\n          },\n          points: {\n            value: foundPlayer.points,\n            isValid: true\n          },\n          weight: {\n            value: foundPlayer.weight,\n            isValid: true\n          },\n          height: {\n            value: foundPlayer.height,\n            isValid: true\n          },\n          grand_slams: {\n            value: foundPlayer.grand_slams,\n            isValid: true\n          }\n        }, true);\n      }\n    };\n\n    getPlayer();\n    console.log('LOADED PLAYER IS ' + loadedPlayer);\n  }, [loadedPlayer, playerId, setFormData]);\n\n  const formSubmitHandler = event => {\n    event.preventDefault();\n    console.log(formState);\n    history.push(`/player/${playerId}`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"player-title\",\n      children: \"Update Player\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), loadedPlayer && /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"player-form\",\n      onSubmit: formSubmitHandler,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        id: \"age\",\n        onInput: inputHandler,\n        validators: [VALIDATOR_REQUIRE()],\n        element: \"input\",\n        type: \"number\",\n        label: \"Age\",\n        errorText: \"Please enter player's age\",\n        initialValue: loadedPlayer.age,\n        initialValid: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        id: \"points\",\n        onInput: inputHandler,\n        validators: [VALIDATOR_REQUIRE()],\n        element: \"input\",\n        type: \"number\",\n        label: \"Points\",\n        errorText: \"Please enter player's points\",\n        initialValue: loadedPlayer.points,\n        initialValid: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        id: \"weight\",\n        onInput: inputHandler,\n        validators: [VALIDATOR_REQUIRE()],\n        element: \"input\",\n        type: \"number\",\n        label: \"Weight\",\n        errorText: \"Please enter player's weight\",\n        initialValue: loadedPlayer.weight,\n        initialValid: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        id: \"height\",\n        onInput: inputHandler,\n        validators: [VALIDATOR_REQUIRE()],\n        element: \"input\",\n        type: \"number\",\n        label: \"Height\",\n        errorText: \"Please enter player's height\",\n        initialValue: loadedPlayer.height,\n        initialValid: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        id: \"grand_slams\",\n        onInput: inputHandler,\n        validators: [],\n        element: \"input\",\n        type: \"number\",\n        label: \"Grand Slams Won\",\n        initialValue: loadedPlayer.grand_slams,\n        initialValid: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        disabled: !formState.isValid,\n        children: \"UPDATE PLAYER\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UpdatePlayer, \"jf+CF9WYgZoenxgpON5dVHD8lLc=\", false, function () {\n  return [useParams, useHistory, useForm];\n});\n\n_c = UpdatePlayer;\nexport default UpdatePlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdatePlayer\");","map":{"version":3,"sources":["/Users/michaelskorin/Desktop/Web Development/TennisPlayers/tennis-players/Frontend/src/players/pages/UpdatePlayer.js"],"names":["React","useState","useEffect","useHistory","useParams","useForm","Input","Button","Card","VALIDATOR_REQUIRE","MOCK_PLAYERS","UpdatePlayer","props","loadedPlayer","setLoadedPlayer","playerId","pid","history","console","log","test","formState","inputHandler","setFormData","age","value","isValid","points","weight","height","grand_slams","getPlayer","foundPlayer","find","player","id","formSubmitHandler","event","preventDefault","push"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\n\nimport './NewPlayer.css';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport Card from '../../shared/components/UIElements/Card';\nimport { VALIDATOR_REQUIRE } from '../../util/validators';\n\nimport { MOCK_PLAYERS } from '../../util/MockPlayers';\n\nconst UpdatePlayer = (props) => {\n  const [loadedPlayer, setLoadedPlayer] = useState(null);\n  const playerId = useParams().pid;\n  const history = useHistory();\n  console.log(props.test);\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      age: {\n        value: null,\n        isValid: false,\n      },\n      points: {\n        value: null,\n        isValid: false,\n      },\n      weight: {\n        value: null,\n        isValid: false,\n      },\n      height: {\n        value: null,\n        isValid: false,\n      },\n      grand_slams: {\n        value: null,\n        isValid: true,\n      },\n    },\n    false\n  );\n\n  useEffect(() => {\n    const getPlayer = () => {\n      const foundPlayer = MOCK_PLAYERS.find((player) => player.id === playerId);\n\n      if (foundPlayer) {\n        setLoadedPlayer(foundPlayer);\n        setFormData(\n          {\n            age: {\n              value: foundPlayer.age,\n              isValid: true,\n            },\n            points: {\n              value: foundPlayer.points,\n              isValid: true,\n            },\n            weight: {\n              value: foundPlayer.weight,\n              isValid: true,\n            },\n            height: {\n              value: foundPlayer.height,\n              isValid: true,\n            },\n            grand_slams: {\n              value: foundPlayer.grand_slams,\n              isValid: true,\n            },\n          },\n          true\n        );\n      }\n    };\n    getPlayer();\n\n    console.log('LOADED PLAYER IS ' + loadedPlayer);\n  }, [loadedPlayer, playerId, setFormData]);\n\n  const formSubmitHandler = (event) => {\n    event.preventDefault();\n    console.log(formState);\n\n    history.push(`/player/${playerId}`);\n  };\n\n  return (\n    <React.Fragment>\n      <h2 className=\"player-title\">Update Player</h2>\n      {loadedPlayer && (\n        <form className=\"player-form\" onSubmit={formSubmitHandler}>\n          <Input\n            id=\"age\"\n            onInput={inputHandler}\n            validators={[VALIDATOR_REQUIRE()]}\n            element=\"input\"\n            type=\"number\"\n            label=\"Age\"\n            errorText=\"Please enter player's age\"\n            initialValue={loadedPlayer.age}\n            initialValid={true}\n          />\n\n          <Input\n            id=\"points\"\n            onInput={inputHandler}\n            validators={[VALIDATOR_REQUIRE()]}\n            element=\"input\"\n            type=\"number\"\n            label=\"Points\"\n            errorText=\"Please enter player's points\"\n            initialValue={loadedPlayer.points}\n            initialValid={true}\n          />\n          <Input\n            id=\"weight\"\n            onInput={inputHandler}\n            validators={[VALIDATOR_REQUIRE()]}\n            element=\"input\"\n            type=\"number\"\n            label=\"Weight\"\n            errorText=\"Please enter player's weight\"\n            initialValue={loadedPlayer.weight}\n            initialValid={true}\n          />\n          <Input\n            id=\"height\"\n            onInput={inputHandler}\n            validators={[VALIDATOR_REQUIRE()]}\n            element=\"input\"\n            type=\"number\"\n            label=\"Height\"\n            errorText=\"Please enter player's height\"\n            initialValue={loadedPlayer.height}\n            initialValid={true}\n          />\n          <Input\n            id=\"grand_slams\"\n            onInput={inputHandler}\n            validators={[]}\n            element=\"input\"\n            type=\"number\"\n            label=\"Grand Slams Won\"\n            initialValue={loadedPlayer.grand_slams}\n            initialValid={true}\n          />\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            UPDATE PLAYER\n          </Button>\n        </form>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default UpdatePlayer;\n"]},"metadata":{},"sourceType":"module"}