{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/michaelskorin/Desktop/Web Development/TennisPlayers/tennis-players/Frontend/src/players/pages/UpdatePlayer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport './NewPlayer.css';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport Card from '../../shared/components/UIElements/Card';\nimport { VALIDATOR_REQUIRE } from '../../util/validators';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\n\nconst UpdatePlayer = () => {\n  _s();\n\n  const {\n    isLoading,\n    error,\n    clearError,\n    sendRequest\n  } = useHttpClient();\n  const [loadedPlayer, setLoadedPlayer] = useState(null);\n  const playerId = useParams().pid;\n  const history = useHistory();\n  const [formState, inputHandler, setFormData] = useForm({\n    age: {\n      value: null,\n      isValid: false\n    },\n    points: {\n      value: null,\n      isValid: false\n    },\n    weight: {\n      value: null,\n      isValid: false\n    },\n    height: {\n      value: null,\n      isValid: false\n    },\n    grand_slams: {\n      value: null,\n      isValid: true\n    }\n  }, false);\n  useEffect(() => {\n    const getPlayer = async () => {\n      //const foundPlayer = MOCK_PLAYERS.find((player) => player.id === playerId);\n      let foundPlayer;\n      let responseData;\n      debugger;\n\n      try {\n        responseData = await sendRequest(`${process.env.REACT_APP_PLAYERS_BACKEND_URL}/player/${playerId}`);\n      } catch (error) {}\n\n      foundPlayer = responseData.player;\n\n      if (foundPlayer) {\n        setLoadedPlayer(foundPlayer);\n        setFormData({\n          age: {\n            value: foundPlayer.age,\n            isValid: true\n          },\n          points: {\n            value: foundPlayer.points,\n            isValid: true\n          },\n          weight: {\n            value: foundPlayer.weight,\n            isValid: true\n          },\n          height: {\n            value: foundPlayer.height,\n            isValid: true\n          },\n          grand_slams: {\n            value: foundPlayer.grand_slams,\n            isValid: true\n          }\n        }, true);\n      }\n    };\n\n    getPlayer();\n  }, [playerId, setFormData, sendRequest]);\n\n  const formSubmitHandler = async event => {\n    event.preventDefault();\n    console.log(formState);\n\n    try {\n      await sendRequest(`${process.env.REACT_APP_PLAYERS_BACKEND_URL}/update/${playerId}`, 'PATCH', JSON.stringify({\n        age: formState.inputs.age.value,\n        points: formState.inputs.points.value,\n        weight: formState.inputs.weight.value,\n        height: formState.inputs.height.value,\n        grand_slams: formState.inputs.grand_slams.value\n      }));\n    } catch (error) {}\n\n    history.push(`/player/${playerId}`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ErrorModal, {\n      error: error,\n      onClear: clearError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {\n        asOverlay: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"player-title\",\n      children: \"Update Player\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), loadedPlayer && /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"player-form\",\n      onSubmit: formSubmitHandler,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        id: \"age\",\n        onInput: inputHandler,\n        validators: [VALIDATOR_REQUIRE()],\n        element: \"input\",\n        type: \"number\",\n        label: \"Age\",\n        errorText: \"Please enter player's age\",\n        initialValue: loadedPlayer.age,\n        initialValid: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        id: \"points\",\n        onInput: inputHandler,\n        validators: [VALIDATOR_REQUIRE()],\n        element: \"input\",\n        type: \"number\",\n        label: \"Points\",\n        errorText: \"Please enter player's points\",\n        initialValue: loadedPlayer.points,\n        initialValid: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        id: \"weight\",\n        onInput: inputHandler,\n        validators: [VALIDATOR_REQUIRE()],\n        element: \"input\",\n        type: \"number\",\n        label: \"Weight\",\n        errorText: \"Please enter player's weight\",\n        initialValue: loadedPlayer.weight,\n        initialValid: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        id: \"height\",\n        onInput: inputHandler,\n        validators: [VALIDATOR_REQUIRE()],\n        element: \"input\",\n        type: \"number\",\n        label: \"Height\",\n        errorText: \"Please enter player's height\",\n        initialValue: loadedPlayer.height,\n        initialValid: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        id: \"grand_slams\",\n        onInput: inputHandler,\n        validators: [],\n        element: \"input\",\n        type: \"number\",\n        label: \"Grand Slams Won\",\n        initialValue: loadedPlayer.grand_slams,\n        initialValid: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        disabled: !formState.isValid,\n        children: \"UPDATE PLAYER\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UpdatePlayer, \"sxpOIGldgDBw/VxzOrJ5++3SrXY=\", false, function () {\n  return [useHttpClient, useParams, useHistory, useForm];\n});\n\n_c = UpdatePlayer;\nexport default UpdatePlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdatePlayer\");","map":{"version":3,"sources":["/Users/michaelskorin/Desktop/Web Development/TennisPlayers/tennis-players/Frontend/src/players/pages/UpdatePlayer.js"],"names":["React","useState","useEffect","useHistory","useParams","useForm","Input","Button","LoadingSpinner","ErrorModal","Card","VALIDATOR_REQUIRE","useHttpClient","UpdatePlayer","isLoading","error","clearError","sendRequest","loadedPlayer","setLoadedPlayer","playerId","pid","history","formState","inputHandler","setFormData","age","value","isValid","points","weight","height","grand_slams","getPlayer","foundPlayer","responseData","process","env","REACT_APP_PLAYERS_BACKEND_URL","player","formSubmitHandler","event","preventDefault","console","log","JSON","stringify","inputs","push"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\n\nimport './NewPlayer.css';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport Card from '../../shared/components/UIElements/Card';\nimport { VALIDATOR_REQUIRE } from '../../util/validators';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\n\nconst UpdatePlayer = () => {\n  const { isLoading, error, clearError, sendRequest } = useHttpClient();\n  const [loadedPlayer, setLoadedPlayer] = useState(null);\n  const playerId = useParams().pid;\n  const history = useHistory();\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      age: {\n        value: null,\n        isValid: false,\n      },\n      points: {\n        value: null,\n        isValid: false,\n      },\n      weight: {\n        value: null,\n        isValid: false,\n      },\n      height: {\n        value: null,\n        isValid: false,\n      },\n      grand_slams: {\n        value: null,\n        isValid: true,\n      },\n    },\n    false\n  );\n\n  useEffect(() => {\n    const getPlayer = async () => {\n      //const foundPlayer = MOCK_PLAYERS.find((player) => player.id === playerId);\n      let foundPlayer;\n      let responseData;\n      debugger;\n      try {\n        responseData = await sendRequest(\n          `${process.env.REACT_APP_PLAYERS_BACKEND_URL}/player/${playerId}`\n        );\n      } catch (error) {}\n\n      foundPlayer = responseData.player;\n\n      if (foundPlayer) {\n        setLoadedPlayer(foundPlayer);\n        setFormData(\n          {\n            age: {\n              value: foundPlayer.age,\n              isValid: true,\n            },\n            points: {\n              value: foundPlayer.points,\n              isValid: true,\n            },\n            weight: {\n              value: foundPlayer.weight,\n              isValid: true,\n            },\n            height: {\n              value: foundPlayer.height,\n              isValid: true,\n            },\n            grand_slams: {\n              value: foundPlayer.grand_slams,\n              isValid: true,\n            },\n          },\n          true\n        );\n      }\n    };\n    getPlayer();\n  }, [playerId, setFormData, sendRequest]);\n\n  const formSubmitHandler = async (event) => {\n    event.preventDefault();\n    console.log(formState);\n    try {\n      await sendRequest(\n        `${process.env.REACT_APP_PLAYERS_BACKEND_URL}/update/${playerId}`,\n        'PATCH',\n        JSON.stringify({\n          age: formState.inputs.age.value,\n          points: formState.inputs.points.value,\n          weight: formState.inputs.weight.value,\n          height: formState.inputs.height.value,\n          grand_slams: formState.inputs.grand_slams.value,\n        })\n      );\n    } catch (error) {}\n\n    history.push(`/player/${playerId}`);\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {isLoading && (\n        <div className=\"center\">\n          <LoadingSpinner asOverlay />\n        </div>\n      )}\n      <h2 className=\"player-title\">Update Player</h2>\n      {loadedPlayer && (\n        <form className=\"player-form\" onSubmit={formSubmitHandler}>\n          <Input\n            id=\"age\"\n            onInput={inputHandler}\n            validators={[VALIDATOR_REQUIRE()]}\n            element=\"input\"\n            type=\"number\"\n            label=\"Age\"\n            errorText=\"Please enter player's age\"\n            initialValue={loadedPlayer.age}\n            initialValid={true}\n          />\n\n          <Input\n            id=\"points\"\n            onInput={inputHandler}\n            validators={[VALIDATOR_REQUIRE()]}\n            element=\"input\"\n            type=\"number\"\n            label=\"Points\"\n            errorText=\"Please enter player's points\"\n            initialValue={loadedPlayer.points}\n            initialValid={true}\n          />\n          <Input\n            id=\"weight\"\n            onInput={inputHandler}\n            validators={[VALIDATOR_REQUIRE()]}\n            element=\"input\"\n            type=\"number\"\n            label=\"Weight\"\n            errorText=\"Please enter player's weight\"\n            initialValue={loadedPlayer.weight}\n            initialValid={true}\n          />\n          <Input\n            id=\"height\"\n            onInput={inputHandler}\n            validators={[VALIDATOR_REQUIRE()]}\n            element=\"input\"\n            type=\"number\"\n            label=\"Height\"\n            errorText=\"Please enter player's height\"\n            initialValue={loadedPlayer.height}\n            initialValid={true}\n          />\n          <Input\n            id=\"grand_slams\"\n            onInput={inputHandler}\n            validators={[]}\n            element=\"input\"\n            type=\"number\"\n            label=\"Grand Slams Won\"\n            initialValue={loadedPlayer.grand_slams}\n            initialValid={true}\n          />\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            UPDATE PLAYER\n          </Button>\n        </form>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default UpdatePlayer;\n"]},"metadata":{},"sourceType":"module"}