{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback, useRef, useEffect } from 'react';\nexport const useHttpClient = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n\n  const clearError = () => {\n    setError(null);\n  };\n\n  const sendRequest = async (url, method = 'GET', body = null, headers = {}) => {\n    setIsLoading(true);\n\n    try {\n      const response = await fetch(url, method, body, headers);\n      const responseData = await response.json();\n\n      if (!response.ok) {\n        throw new Error(responseData.message);\n      }\n\n      setIsLoading(false);\n      return responseData;\n    } catch (err) {\n      setIsLoading(false);\n      setError(err.message);\n      throw err;\n    }\n  }; //     []\n  //   );\n\n\n  return {\n    isLoading,\n    sendRequest,\n    error,\n    clearError\n  };\n};\n\n_s(useHttpClient, \"kqo/w5mlpzJwOJjHvl1o6r6CEAk=\");","map":{"version":3,"sources":["/Users/michaelskorin/Desktop/Web Development/TennisPlayers/tennis-players/Frontend/src/shared/hooks/http-hook.js"],"names":["useState","useCallback","useRef","useEffect","useHttpClient","isLoading","setIsLoading","error","setError","clearError","sendRequest","url","method","body","headers","response","fetch","responseData","json","ok","Error","message","err"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,MAAhC,EAAwCC,SAAxC,QAAyD,OAAzD;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAM;AAAA;;AACjC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,EAAlC;;AAEA,QAAMS,UAAU,GAAG,MAAM;AACvBD,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,GAFD;;AAIA,QAAME,WAAW,GAAG,OAClBC,GADkB,EAElBC,MAAM,GAAG,KAFS,EAGlBC,IAAI,GAAG,IAHW,EAIlBC,OAAO,GAAG,EAJQ,KAKf;AACHR,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AAEA,QAAI;AACF,YAAMS,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAD,EAAMC,MAAN,EAAcC,IAAd,EAAoBC,OAApB,CAA5B;AACA,YAAMG,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B;;AAEA,UAAI,CAACH,QAAQ,CAACI,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAUH,YAAY,CAACI,OAAvB,CAAN;AACD;;AAEDf,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,aAAOW,YAAP;AACD,KAVD,CAUE,OAAOK,GAAP,EAAY;AACZhB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,MAAAA,QAAQ,CAACc,GAAG,CAACD,OAAL,CAAR;AACA,YAAMC,GAAN;AACD;AACF,GAvBD,CARiC,CAgCjC;AACA;;;AAEA,SAAO;AAAEjB,IAAAA,SAAF;AAAaK,IAAAA,WAAb;AAA0BH,IAAAA,KAA1B;AAAiCE,IAAAA;AAAjC,GAAP;AACD,CApCM;;GAAML,a","sourcesContent":["import { useState, useCallback, useRef, useEffect } from 'react';\n\nexport const useHttpClient = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n\n  const clearError = () => {\n    setError(null);\n  };\n\n  const sendRequest = async (\n    url,\n    method = 'GET',\n    body = null,\n    headers = {}\n  ) => {\n    setIsLoading(true);\n\n    try {\n      const response = await fetch(url, method, body, headers);\n      const responseData = await response.json();\n\n      if (!response.ok) {\n        throw new Error(responseData.message);\n      }\n\n      setIsLoading(false);\n      return responseData;\n    } catch (err) {\n      setIsLoading(false);\n      setError(err.message);\n      throw err;\n    }\n  };\n  //     []\n  //   );\n\n  return { isLoading, sendRequest, error, clearError };\n};\n"]},"metadata":{},"sourceType":"module"}