{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useCallback } from 'react';\nlet logoutTimer;\nexport const useAuth = () => {\n  _s();\n\n  const [token, setToken] = useState();\n  const [tokenExpiration, setTokenExpiration] = useState();\n  const [userId, setUserId] = useState();\n  const login = useCallback((uid, token, expirationTime) => {\n    setUserId(uid);\n    setToken(token);\n    const tokenExpiration = expirationTime || new Date(new Date().getTime() + 1000 * 10);\n    setTokenExpiration(tokenExpiration);\n    localStorage.setItem('userData', JSON.stringify({\n      userId: uid,\n      token: token,\n      expiration: tokenExpiration.toISOString()\n    }));\n  }, []);\n  const logout = useCallback(() => {\n    setToken(null);\n    setTokenExpiration(null);\n    setUserId(null);\n    localStorage.removeItem('userData');\n  }, []);\n  useEffect(() => {\n    if (token && tokenExpiration) {\n      const remainingTime = tokenExpiration.getTime() - new Date().getTime();\n      logoutTimer = setTimeout(logout, remainingTime);\n    } else {\n      clearTimeout(logoutTimer);\n    }\n  }, [token, tokenExpiration, logout]);\n  useEffect(() => {\n    const storedData = JSON.parse(localStorage.getItem('userData'));\n\n    if (storedData && storedData.token && new Date(storedData.expiration) > new Date()) {\n      login(storedData.userId, storedData.token, new Date(storedData.expiration));\n    }\n  }, [login]);\n  return {\n    login,\n    logout,\n    token,\n    userId\n  };\n};\n\n_s(useAuth, \"/3RGY53AC4HXAyzqoDwm7UWSR5g=\");","map":{"version":3,"sources":["/Users/michaelskorin/Desktop/Web Development/TennisPlayers/tennis-players/Frontend/src/shared/hooks/auth-hook.js"],"names":["useState","useEffect","useCallback","logoutTimer","useAuth","token","setToken","tokenExpiration","setTokenExpiration","userId","setUserId","login","uid","expirationTime","Date","getTime","localStorage","setItem","JSON","stringify","expiration","toISOString","logout","removeItem","remainingTime","setTimeout","clearTimeout","storedData","parse","getItem"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AAEA,IAAIC,WAAJ;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAC3B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,EAAlC;AACA,QAAM,CAACO,eAAD,EAAkBC,kBAAlB,IAAwCR,QAAQ,EAAtD;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,EAApC;AAEA,QAAMW,KAAK,GAAGT,WAAW,CAAC,CAACU,GAAD,EAAMP,KAAN,EAAaQ,cAAb,KAAgC;AACxDH,IAAAA,SAAS,CAACE,GAAD,CAAT;AACAN,IAAAA,QAAQ,CAACD,KAAD,CAAR;AAEA,UAAME,eAAe,GACnBM,cAAc,IAAI,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,OAAX,KAAuB,OAAO,EAAvC,CADpB;AAGAP,IAAAA,kBAAkB,CAACD,eAAD,CAAlB;AAEAS,IAAAA,YAAY,CAACC,OAAb,CACE,UADF,EAEEC,IAAI,CAACC,SAAL,CAAe;AACbV,MAAAA,MAAM,EAAEG,GADK;AAEbP,MAAAA,KAAK,EAAEA,KAFM;AAGbe,MAAAA,UAAU,EAAEb,eAAe,CAACc,WAAhB;AAHC,KAAf,CAFF;AAQD,GAjBwB,EAiBtB,EAjBsB,CAAzB;AAmBA,QAAMC,MAAM,GAAGpB,WAAW,CAAC,MAAM;AAC/BI,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAE,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAE,IAAAA,SAAS,CAAC,IAAD,CAAT;AACAM,IAAAA,YAAY,CAACO,UAAb,CAAwB,UAAxB;AACD,GALyB,EAKvB,EALuB,CAA1B;AAOAtB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,KAAK,IAAIE,eAAb,EAA8B;AAC5B,YAAMiB,aAAa,GAAGjB,eAAe,CAACQ,OAAhB,KAA4B,IAAID,IAAJ,GAAWC,OAAX,EAAlD;AACAZ,MAAAA,WAAW,GAAGsB,UAAU,CAACH,MAAD,EAASE,aAAT,CAAxB;AACD,KAHD,MAGO;AACLE,MAAAA,YAAY,CAACvB,WAAD,CAAZ;AACD;AACF,GAPQ,EAON,CAACE,KAAD,EAAQE,eAAR,EAAyBe,MAAzB,CAPM,CAAT;AASArB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM0B,UAAU,GAAGT,IAAI,CAACU,KAAL,CAAWZ,YAAY,CAACa,OAAb,CAAqB,UAArB,CAAX,CAAnB;;AACA,QACEF,UAAU,IACVA,UAAU,CAACtB,KADX,IAEA,IAAIS,IAAJ,CAASa,UAAU,CAACP,UAApB,IAAkC,IAAIN,IAAJ,EAHpC,EAIE;AACAH,MAAAA,KAAK,CACHgB,UAAU,CAAClB,MADR,EAEHkB,UAAU,CAACtB,KAFR,EAGH,IAAIS,IAAJ,CAASa,UAAU,CAACP,UAApB,CAHG,CAAL;AAKD;AACF,GAbQ,EAaN,CAACT,KAAD,CAbM,CAAT;AAeA,SAAO;AAAEA,IAAAA,KAAF;AAASW,IAAAA,MAAT;AAAiBjB,IAAAA,KAAjB;AAAwBI,IAAAA;AAAxB,GAAP;AACD,CAxDM;;GAAML,O","sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\nlet logoutTimer;\n\nexport const useAuth = () => {\n  const [token, setToken] = useState();\n  const [tokenExpiration, setTokenExpiration] = useState();\n  const [userId, setUserId] = useState();\n\n  const login = useCallback((uid, token, expirationTime) => {\n    setUserId(uid);\n    setToken(token);\n\n    const tokenExpiration =\n      expirationTime || new Date(new Date().getTime() + 1000 * 10);\n\n    setTokenExpiration(tokenExpiration);\n\n    localStorage.setItem(\n      'userData',\n      JSON.stringify({\n        userId: uid,\n        token: token,\n        expiration: tokenExpiration.toISOString(),\n      })\n    );\n  }, []);\n\n  const logout = useCallback(() => {\n    setToken(null);\n    setTokenExpiration(null);\n    setUserId(null);\n    localStorage.removeItem('userData');\n  }, []);\n\n  useEffect(() => {\n    if (token && tokenExpiration) {\n      const remainingTime = tokenExpiration.getTime() - new Date().getTime();\n      logoutTimer = setTimeout(logout, remainingTime);\n    } else {\n      clearTimeout(logoutTimer);\n    }\n  }, [token, tokenExpiration, logout]);\n\n  useEffect(() => {\n    const storedData = JSON.parse(localStorage.getItem('userData'));\n    if (\n      storedData &&\n      storedData.token &&\n      new Date(storedData.expiration) > new Date()\n    ) {\n      login(\n        storedData.userId,\n        storedData.token,\n        new Date(storedData.expiration)\n      );\n    }\n  }, [login]);\n\n  return { login, logout, token, userId };\n};\n"]},"metadata":{},"sourceType":"module"}